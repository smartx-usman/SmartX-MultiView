doctype html
html(lang='en')
  head
    meta(charset='utf-8')
    meta(http-equiv='X-UA-Compatible', content='IE=edge')
    meta(name='viewport', content='width=device-width, initial-scale=1')
    meta(name='description', content='')
    meta(name='author', content='')
    style(type='text/css').
      #mynetwork {
      width: 100%;
      height: 60%;
      background: #222222;
      }
    // Bootstrap Core CSS
    link(href='../bower_components/bootstrap/dist/css/bootstrap.min.css', rel='stylesheet')
    // MetisMenu CSS
    link(href='../bower_components/metisMenu/dist/metisMenu.min.css', rel='stylesheet')
    // Custom CSS
    link(href='../dist/css/sb-admin-2.css', rel='stylesheet')
    // Custom Fonts
    link(href='../bower_components/font-awesome/css/font-awesome.min.css', rel='stylesheet', type='text/css')
    // HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries
    // WARNING: Respond.js doesn't work if you view the page via file://
    //if lt IE 9
    script(src='https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js')
    script(src='https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js')
    script(type='text/javascript', src='javascripts/vis.js')
    script(type='text/javascript', src='javascripts/boxes.json')
    link(href='stylesheets/vis.css', rel='stylesheet', type='text/css')
    script(type='text/javascript').
      //redirect to login page if user is not logged
      var session_username = sessionStorage.getItem('ss_user_name');
      var session_userrole = sessionStorage.getItem('ss_role');
      if(session_username === null){
        window.location.replace("http://103.22.221.55:3006");
      }
      //var boxes = JSON.parse(data);
      // Receive Active Boxes List
      var boxList         = !{boxList};
      var switchList      = !{switchList};
      var instanceList    = !{instanceList};
      var serviceList     = !{serviceList};
      //var pPathStatus     = !{pPathStatus};
      var ovsBridgeStatus = !{ovsBridgeStatus};
      var index=0, boxlevel=1, switchlevel=0, instancelevel=0, servicelevel=0;
      var nodes = null;
      var edges = null;
      var network = null;
      var DIR = 'images/';
      var EDGE_LENGTH_MAIN = 350;
      var EDGE_LENGTH_SUB = 150;
      var LENGTH_SERVER = 150,
      LENGTH_SUB = 50,
      WIDTH_SCALE = 2,
      GREEN = 'green',
      RED = '#C5000B',
      ORANGE = 'orange',
      //GRAY = '#666666',
      GRAY = 'gray',
      BLACK = '#2B1B17';
      // Called when the Visualization API is loaded.
      function draw() {
      document.getElementById('text').innerHTML="Logged as "+session_userrole;
      // Create a data table with nodes.
      nodes = [];
      // Create a data table with links.
      edges = [];
      //Add network Node
      nodes.push({id: 1, image: DIR + 'tein.png', shape: 'image', level:0, fixed: true, physics:true});
      //nodes.push({id: 1001, x: x, y: y, label: 'Desktop', group: 'desktop', value: 4, fixed: false, physics:false});
      //edges.push({from: 1000, to: 1001, length: EDGE_LENGTH_MAIN, width: WIDTH_SCALE * 6, color: GREEN, label: '0.71 mbps'});
      //Draw the Physical Boxes
      for (var i in boxList)
      {
      index=index+1;
      BoxNodeID = index * 1000;
      if (boxList[i].data_ip_status == 'UP')
      {
      nodes.push({id: BoxNodeID, label: boxList[i].host, image: DIR + 'pboxgreen.jpg', shape: 'image', level:boxlevel, fixed: false, physics:true});
      edges.push({from: 1, to: BoxNodeID, length: EDGE_LENGTH_MAIN, width: WIDTH_SCALE * 4, color: GREEN, label: '0.71 mbps'});
      }
      else
      {
      nodes.push({id: BoxNodeID, label: boxList[i].host, image: DIR + 'pboxred.jpg', shape: 'image', level:boxlevel, fixed: false, physics:true});
      edges.push({from: 1, to: BoxNodeID, length: EDGE_LENGTH_MAIN, width: WIDTH_SCALE * 4, color: RED, label: '0.71 mbps'});
      }
      //Draw the OVS Bridges
      switchNodeID = BoxNodeID;
      for (var j in switchList)
      {
      if (switchList[j].bridge !== 'br-ex')
      {
      switchNodeID = switchNodeID + 1;
      if (switchNodeID != BoxNodeID + 1)
      {
      switchlevel=switchlevel + 1;
      nodes.push({id: switchNodeID, label: switchList[j].bridge, level:switchlevel, group: 'desktop', value: 3, fixed: false, physics:false});
      edges.push({from: switchNodeID-1, to: switchNodeID, length: EDGE_LENGTH_SUB, color: GREEN});
      }
      else
      {
      switchlevel = boxlevel + 1;
      nodes.push({id: switchNodeID, label: switchList[j].bridge, level:switchlevel, group: 'desktop', value: 3, fixed: false, physics:false});
      edges.push({from: BoxNodeID, to: switchNodeID, length: EDGE_LENGTH_SUB, color: GREEN});
      }
      }
      }
      //Draw the OpenStack Instances
      vmNodeID      = BoxNodeID+100;
      serviceNodeID = BoxNodeID+600;
      instancelevel = switchlevel+1;
      for (var k in instanceList)
      {
      if (boxList[i].box == instanceList[k].box)
      {
      vmNodeID = vmNodeID + 1;
      nodes.push({id: vmNodeID, label: instanceList[k].name, level:instancelevel, image: DIR + 'vmicongreen.png', shape: 'image', group: 'instance', title: 'Instance Details', fixed: false, physics:true});
      edges.push({from: switchNodeID, to: vmNodeID, length: EDGE_LENGTH_SUB, color: GREEN});
      //Draw the Services Running in the OpenStack Instance
      serviceNodeID = serviceNodeID+1;
      nodes.push({id: serviceNodeID, label: 'Streaming', level:switchlevel+2, group: 'desktop', value: 3, fixed: false, physics:false});
      edges.push({from: vmNodeID, to: BoxNodeID+601, length: EDGE_LENGTH_SUB, color: GREEN});
      }
      }
      }
      //edges.push({from: 1, to: 2, length: EDGE_LENGTH_MAIN, width: WIDTH_SCALE * 4, color: GREEN, label: '0.71 mbps', arrows:'to, from'});
      //edges.push({from: 1, to: 1001, length: EDGE_LENGTH_MAIN, width: WIDTH_SCALE * 4, color: GREEN, label: '0.71 mbps', arrows:'to, from'});
      // legend
      var mynetwork = document.getElementById('mynetwork');
      var x = - mynetwork.clientWidth / 2 + 50;
      var y = - mynetwork.clientHeight / 2 + 50;
      var step = 70;
      // create a visualization network
      var container = document.getElementById('mynetwork');
      var data = {
      nodes: nodes,
      edges: edges
      };
      var options = {
      nodes: {
      //shape: 'dot',
      size: 20,
      borderWidth: 2,
      font: {
      size: 16,
      color: '#ffffff'
      },
      scaling: {
      min: 16,
      max: 32,
      }
      },
      edges: {
      color: GRAY,
      smooth: false,
      width: 2
      },
      layout: {
      hierarchical: {
      enabled:true,
      levelSeparation: 150,
      nodeSpacing: 160,
      direction: "DU",
      }
      },
      physics:{
      barnesHut:{gravitationalConstant:-30000},
      stabilization: {iterations:2500}
      },
      interaction: {
      navigationButtons: true,
      keyboard: true
      },
      groups: {
      'switch': {
      shape: 'triangle',
      color: '#FF9900' // orange
      },
      mobile: {
      shape: 'dot',
      color: "#5A1E5C" // purple
      },
      server: {
      shape: 'square',
      color: "#C5000B" // red
      },
      internet: {
      shape: 'square',
      color: "#109618" // green
      },
      instance: {
      shape: 'square',
      color: "#C5000B" // blue
      },
      workload: {
      shape: 'dot',
      color: "#C5000B" // red
      }
      }
      };
      network = new vis.Network(container, data, options);
      network.on("click", function (params) {
        params.event = "[original event]";
        if(params.nodes == ""){

        }
        else
        {
          var iframe = document.getElementById('grafanaIframe');
          iframe.src = 'http://103.22.221.55:3000/dashboard/script/test.js?rows=3&name='+params.nodes;
          //document.getElementById(FrameID).contentDocument.location.reload(true);
          //alert(params.nodes);
          }
          });
      }
  body(onload='draw()')
    #wrapper
      // Navigation
      nav.navbar.navbar-default.navbar-static-top(role='navigation', style='margin-bottom: 0')
        .navbar-header
          button.navbar-toggle(type='button', data-toggle='collapse', data-target='.navbar-collapse')
            span.sr-only Toggle navigation
            span.icon-bar
            span.icon-bar
            span.icon-bar
          p
            #text
        ul.nav.navbar-top-links.navbar-right
          li.dropdown
            a.dropdown-toggle(data-toggle='dropdown', href='#')
              i.fa.fa-envelope.fa-fw
              i.fa.fa-caret-down
            ul.dropdown-menu.dropdown-messages
          li.dropdown
            a.dropdown-toggle(data-toggle='dropdown', href='#')
              i.fa.fa-tasks.fa-fw
              i.fa.fa-caret-down
            ul.dropdown-menu.dropdown-tasks
          li.dropdown
            a.dropdown-toggle(data-toggle='dropdown', href='#')
              i.fa.fa-bell.fa-fw
              i.fa.fa-caret-down
            ul.dropdown-menu.dropdown-alerts
          li.dropdown
            a.dropdown-toggle(data-toggle='dropdown', href='#')
              i.fa.fa-user.fa-fw
              i.fa.fa-caret-down
            ul.dropdown-menu.dropdown-user
              li
                a(href='#')
                  i.fa.fa-user.fa-fw
                  |  User Profile
              li
                a(href='#')
                  i.fa.fa-gear.fa-fw
                  |  Settings
              li.divider
              li
                a(href='login')
                  i.fa.fa-sign-out.fa-fw
                  |  Logout
        .navbar-default.sidebar(role='navigation')
          .sidebar-nav.navbar-collapse
            ul#side-menu.nav
              li.sidebar-search
                .input-group.custom-search-form
                  input.form-control(type='text', placeholder='Search...')
                  span.input-group-btn
                    button.btn.btn-default(type='button')
                      i.fa.fa-search
              li
                a(href='#')
                  i.fa.fa-bookmark.fa-fw
                  |  Multiview
                  span.fa.arrow
                ul.nav.nav-second-level
                  li
                    a(href='#') Resource-centric View
                  li
                    a(href='#') Flow-centric View
                  li
                    a(href='#') Service-centric View
              li
                a(href='login')
                  i.fa.fa-sign-out.fa-fw
                  |  Logout
      #page-wrapper
        .container-fluid
          .row
            .col-lg-12
              h1.page-header
        .row
          .col-lg-12
            .panel.panel-default
              .panel-heading
                | Visualization Panel
              .panel-body
                p
                 #mynetwork(align='center')
        .row
          .col-lg-12
            .panel.panel-default
              .panel-heading
                | Grafana Panel
              .panel-body
                p
                 iframe(id ='grafanaIframe', src='http://103.22.221.55:3000/dashboard/script/test.js', width='100%', height='50%')
    // jQuery
    script(src='../bower_components/jquery/dist/jquery.min.js')
    // Bootstrap Core JavaScript
    script(src='../bower_components/bootstrap/dist/js/bootstrap.min.js')
    // Metis Menu Plugin JavaScript
    script(src='../bower_components/metisMenu/dist/metisMenu.min.js')
    // Custom Theme JavaScript
    script(src='../dist/js/sb-admin-2.js')
